name: Pre-release
on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  Build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            arch: x64
            name: windows-x64
          - os: ubuntu-latest
            arch: x64
            name: ubuntu-x64
          - os: ubuntu-latest
            arch: arm64
            name: ubuntu-arm64

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      # <--- 修改: 将Windows构建分为独立的一步，并使用pwsh
      - name: Install and Build on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          echo "Running Windows x64 build..."
          # Install UPX for Windows
          $url = "https://github.com/upx/upx/releases/download/v4.2.4/upx-4.2.4-win64.zip"
          $output = "upx.zip"
          Invoke-WebRequest -Uri $url -OutFile $output
          Expand-Archive -Path $output -DestinationPath "C:\upx_temp"
          New-Item -ItemType Directory -Path "C:\upx" -Force
          Move-Item "C:\upx_temp\upx-*\*" "C:\upx" -Force
          Remove-Item "C:\upx_temp", $output -Recurse -Force
          
          # Install Python deps and build
          pip install pyinstaller
          pip install -r requirements.txt
          python .github/scripts/add_build_info.py
          pyinstaller build.spec --upx-dir "C:\upx"

      # <--- 修改: 将Linux x64构建分为独立的一步
      - name: Install and Build on Linux x64
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
        shell: bash
        run: |
          echo "Running Linux x64 native build..."
          sudo apt-get update
          sudo apt-get install -y upx-ucl
          pip install pyinstaller
          pip install -r requirements.txt
          python .github/scripts/add_build_info.py
          pyinstaller build.spec

      # <--- 修改: 将Linux arm64构建分为独立的一步
      - name: Install and Build on Linux arm64 (Cross-Compile)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        shell: bash
        run: |
          echo "Running Linux arm64 cross-compile build..."
          docker run --rm --platform linux/arm64 -v ${{ github.workspace }}:/src `
            python:3.12-slim-bookworm `
            sh -c "cd /src && `
              apt-get update && apt-get install -y upx-ucl && `
              pip install pyinstaller && `
              pip install -r requirements.txt && `
              python .github/scripts/add_build_info.py && `
              pyinstaller build.spec"

      - name: Rename output files
        shell: bash
        run: |
          cd dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            for file in *.exe; do
              if [ -f "$file" ]; then
                mv "$file" "Steamauto-${{ matrix.name }}.exe"
              fi
            done
          else
            for file in *; do
              if [ -f "$file" ] && [ -x "$file" ] && [[ "$file" != *"."* ]]; then
                mv "$file" "Steamauto-${{ matrix.name }}"
              fi
            done
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-dist
          path: dist
          retention-days: 3

  Publish:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT }}
          repository: jiajiaxd/Steamauto-Tutorial
          event-type: Sync
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./Steamauto

      - name: Finalization
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          echo "DATE=$(date +"%Y%m%d-%H%M")" >> $GITHUB_ENV
          mkdir releases
          mv Steamauto/*-dist/* releases/

      - name: Upload to Github Releases
        uses: ncipollo/release-action@v1
        with:
          commit: "master"
          tag: ${{ env.DATE }}
