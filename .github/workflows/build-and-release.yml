name: Pre-release
on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  Build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows-x64
            standalone_arch: ''
          - os: ubuntu-latest
            name: ubuntu-x64
            standalone_arch: 'x86_64'
          - os: ubuntu-24.04-arm
            name: ubuntu-arm64
            standalone_arch: 'aarch64'

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4

      # --- 1. 为 Windows 使用标准的 setup-python ---
      - name: Set up Python for Windows
        if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          architecture: x64

      # --- 2. 为 Linux 动态获取并设置最新的静态 Python (已修复 API 调用) ---
      - name: Set up Static Python for Linux
        if: runner.os == 'Linux'
        env:
          # 将 GITHUB_TOKEN 传入脚本环境
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          
          PYTHON_VERSION_PREFIX="3.12"
          
          echo "Fetching latest release data using authenticated API call..."
          
          # 关键修正：在 curl 命令中加入 Authorization 请求头，使用 GITHUB_TOKEN 进行认证，避免速率限制
          API_RESPONSE=$(curl -s -H "Authorization: Bearer $GH_TOKEN" https://api.github.com/repos/indygreg/python-build-standalone/releases/latest)
          
          ASSET_URL=$(echo "$API_RESPONSE" | jq -r ".assets[] | select(.name | test(\"cpython-${PYTHON_VERSION_PREFIX}.*${{ matrix.standalone_arch }}-unknown-linux-musl-install_only.tar.gz\")) | .browser_download_url")
          
          if [ -z "$ASSET_URL" ] || [ "$ASSET_URL" = "null" ]; then
            echo "::error::Could not find a download URL for Python ${PYTHON_VERSION_PREFIX} and arch ${{ matrix.standalone_arch }}."
            echo "API Response: $API_RESPONSE" # 打印API响应以供调试
            exit 1
          fi
          
          echo "Found asset URL: ${ASSET_URL}"
          
          curl -L -o python.tar.gz "${ASSET_URL}"
          
          mkdir -p python-static
          tar -xzf python.tar.gz -C python-static
          
          echo "${{ github.workspace }}/python-static/python/bin" >> $GITHUB_PATH
          
          # 验证
          which python
          python --version

      - name: Install UPX (Windows)
        if: runner.os == 'Windows'
        run: |
          $url = "https://github.com/upx/upx/releases/download/v5.0.0/upx-5.0.0-win64.zip"
          $output = "upx.zip"
          Invoke-WebRequest -Uri $url -OutFile $output
          Expand-Archive -Path $output -DestinationPath C:\upx_temp
          New-Item -ItemType Directory -Path C:\upx -Force
          Move-Item C:\upx_temp\upx-5.0.0-win64\* C:\upx -Force
          Remove-Item C:\upx_temp, $output -Recurse -Force

      - name: Install UPX (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y upx

      - name: Install requirements and build
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          python .github/scripts/add_build_info.py
          
          if [ "${{ runner.os }}" = "Windows" ]; then
            pyinstaller build.spec --upx-dir C:\\upx
          else
            pyinstaller build.spec
          fi

      - name: Rename output files
        shell: bash
        run: |
          cd dist
          if [ "${{ runner.os }}" = "Windows" ]; then
            mv *.exe "Steamauto-${{ matrix.name }}.exe"
          else
            EXECUTABLE_NAME=$(find . -maxdepth 1 -type f ! -name "*.*" | head -n 1)
            if [ -n "$EXECUTABLE_NAME" ]; then
              mv "$EXECUTABLE_NAME" "Steamauto-${{ matrix.name }}"
            else
              echo "Error: Could not find the executable to rename."
              exit 1
            fi
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-dist
          path: dist
          retention-days: 3

  Publish:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT }}
          repository: jiajiaxd/Steamauto-Tutorial
          event-type: Sync
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./Steamauto

      - name: Finalization
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          echo "DATE=$(date +"%Y%m%d-%H%M")" >> $GITHUB_ENV
          mkdir releases
          mv Steamauto/*-dist/* releases/

      - name: Upload to Github Releases
        uses: ncipollo/release-action@v1
        with:
          commit: "master"
          tag: ${{ env.DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: releases/*
          prerelease: true
