name: Pre-release
on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  Build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows-x64
            standalone_arch: '' # Not used for Windows
          - os: ubuntu-latest
            name: ubuntu-x64
            standalone_arch: 'x86_64' # Arch name for python-build-standalone
          # 关键修正：完全按照您的要求使用 ubuntu-24.04-arm runner
          - os: ubuntu-24.04-arm
            name: ubuntu-arm64
            standalone_arch: 'aarch64' # Arch name for python-build-standalone

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4

      # --- 为 Windows 使用标准的 setup-python ---
      - name: Set up Python for Windows
        if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          architecture: x64

      # --- 为 Linux (x64 和 ARM64) 手动下载并设置静态链接的 Python ---
      - name: Set up Static Python for Linux
        if: runner.os == 'Linux'
        run: |
          PYTHON_VERSION="3.12.4"
          RELEASE_TAG="20240623" # A recent stable tag from the standalone project
          
          # 根据矩阵中的架构构造下载链接
          DOWNLOAD_URL="https://github.com/indygreg/python-build-standalone/releases/download/${RELEASE_TAG}/cpython-${PYTHON_VERSION}+${RELEASE_TAG}-${{ matrix.standalone_arch }}-unknown-linux-musl-install_only.tar.gz"
          
          echo "=========================================================="
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner Arch: ${{ runner.arch }}"
          echo "Target Standalone Arch: ${{ matrix.standalone_arch }}"
          echo "Downloading from: ${DOWNLOAD_URL}"
          echo "=========================================================="
          
          curl -L -o python.tar.gz "${DOWNLOAD_URL}"
          
          mkdir -p python-static
          tar -xzf python.tar.gz -C python-static
          
          # 将静态 Python 的 bin 目录添加到 PATH
          echo "${{ github.workspace }}/python-static/python/bin" >> $GITHUB_PATH
          
          # 验证 Python 是否已正确设置
          echo "Verifying Python installation:"
          which python
          python --version
          ls -l ${{ github.workspace }}/python-static/python/bin

      - name: Install UPX (Windows)
        if: runner.os == 'Windows'
        run: |
          $url = "https://github.com/upx/upx/releases/download/v5.0.0/upx-5.0.0-win64.zip"
          $output = "upx.zip"
          Invoke-WebRequest -Uri $url -OutFile $output
          Expand-Archive -Path $output -DestinationPath C:\upx_temp
          New-Item -ItemType Directory -Path C:\upx -Force
          Move-Item C:\upx_temp\upx-5.0.0-win64\* C:\upx -Force
          Remove-Item C:\upx_temp, $output -Recurse -Force

      - name: Install UPX (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y upx

      - name: Install requirements and build
        shell: bash
        run: |
          # 无论在哪个平台，PATH中都应该是正确的Python
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          python .github/scripts/add_build_info.py
          
          if [ "${{ runner.os }}" = "Windows" ]; then
            pyinstaller build.spec --upx-dir C:\\upx
          else
            pyinstaller build.spec
          fi

      - name: Rename output files
        shell: bash
        run: |
          cd dist
          if [ "${{ runner.os }}" = "Windows" ]; then
            mv *.exe "Steamauto-${{ matrix.name }}.exe"
          else
            EXECUTABLE_NAME=$(find . -maxdepth 1 -type f ! -name "*.*" | head -n 1)
            if [ -n "$EXECUTABLE_NAME" ]; then
              mv "$EXECUTABLE_NAME" "Steamauto-${{ matrix.name }}"
            else
              echo "Error: Could not find the executable to rename."
              exit 1
            fi
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-dist
          path: dist
          retention-days: 3

  Publish:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT }}
          repository: jiajiaxd/Steamauto-Tutorial
          event-type: Sync
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./Steamauto

      - name: Finalization
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          echo "DATE=$(date +"%Y%m%d-%H%M")" >> $GITHUB_ENV
          mkdir releases
          mv Steamauto/*-dist/* releases/

      - name: Upload to Github Releases
        uses: ncipollo/release-action@v1
        with:
          commit: "master"
          tag: ${{ env.DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: releases/*
          prerelease: true
