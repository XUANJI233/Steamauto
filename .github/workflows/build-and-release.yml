name: Pre-release
on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  Build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            arch: x64
            name: windows-x64
            python_arch: x64 # For setup-python on Windows
            standalone_arch: "" # Not used on Windows
          - os: ubuntu-latest
            arch: x64
            name: ubuntu-x64
            python_arch: x64 # Fallback for setup-python
            standalone_arch: "x86_64" # Arch name for standalone builds
          - os: ubuntu-latest
            arch: aarch64
            name: ubuntu-arm64
            python_arch: x64 # Runner's native arch
            standalone_arch: "aarch64" # Arch name for standalone builds

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4

      # --- 关键修改：分操作系统设置Python ---

      # 1. 为 Windows 使用标准的 setup-python
      - name: Set up Python for Windows
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          architecture: ${{ matrix.python_arch }}

      # 2. 为 Linux 手动下载并设置静态链接的 Python
      - name: Set up Static Python for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          PYTHON_VERSION="3.12.4" # Specify a concrete version available
          RELEASE_TAG="20240623" # Tag from python-build-standalone releases
          
          # Construct the download URL based on architecture
          DOWNLOAD_URL="https://github.com/indygreg/python-build-standalone/releases/download/${RELEASE_TAG}/cpython-${PYTHON_VERSION}+${RELEASE_TAG}-${{ matrix.standalone_arch }}-unknown-linux-musl-install_only.tar.gz"
          
          echo "Downloading from ${DOWNLOAD_URL}"
          curl -L -o python.tar.gz "${DOWNLOAD_URL}"
          
          # Extract and set up
          mkdir -p python-static
          tar -xzf python.tar.gz -C python-static
          
          # Add the static python's bin directory to the PATH for subsequent steps
          echo "${{ github.workspace }}/python-static/python/bin" >> $GITHUB_PATH
          
          # Verify the python version and path
          which python
          python --version

      - name: Install UPX (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $url = "https://github.com/upx/upx/releases/download/v5.0.0/upx-5.0.0-win64.zip"
          $output = "upx.zip"
          Invoke-WebRequest -Uri $url -OutFile $output
          Expand-Archive -Path $output -DestinationPath C:\upx_temp
          New-Item -ItemType Directory -Path C:\upx -Force
          Move-Item C:\upx_temp\upx-5.0.0-win64\* C:\upx -Force
          Remove-Item C:\upx_temp, $output -Recurse -Force

      - name: Install UPX (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y upx

      - name: Install requirements and build
        shell: bash
        run: |
          # The correct python (static on Linux) is now in the PATH
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          python .github/scripts/add_build_info.py
          
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            pyinstaller build.spec --upx-dir C:\\upx
          else
            # For Linux, UPX is in the PATH, PyInstaller will find it
            pyinstaller build.spec
          fi

      - name: Rename output files
        shell: bash
        run: |
          cd dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv *.exe "Steamauto-${{ matrix.name }}.exe"
          else
            EXECUTABLE_NAME=$(find . -maxdepth 1 -type f ! -name "*.*" | head -n 1)
            if [ -n "$EXECUTABLE_NAME" ]; then
              mv "$EXECUTABLE_NAME" "Steamauto-${{ matrix.name }}"
            else
              echo "Error: Could not find the executable to rename."
              exit 1
            fi
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-dist
          path: dist
          retention-days: 3

  Publish:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT }}
          repository: jiajiaxd/Steamauto-Tutorial
          event-type: Sync
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./Steamauto

      - name: Finalization
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          echo "DATE=$(date +"%Y%m%d-%H%M")" >> $GITHUB_ENV
          mkdir releases
          mv Steamauto/*-dist/* releases/

      - name: Upload to Github Releases
        uses: ncipollo/release-action@v1
        with:
          commit: "master"
          tag: ${{ env.DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: releases/*
          prerelease: true
