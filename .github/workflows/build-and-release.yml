name: Pre-release
on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  Build:
    # 使用 strategy.matrix 策略来定义不同的编译平台
    strategy:
      matrix:
        # include 允许我们定义更复杂的组合
        include:
          - os: windows-latest
            arch: x64
            name: windows-x64
          - os: ubuntu-latest
            arch: x64
            name: ubuntu-x64
          - os: ubuntu-latest
            arch: arm64
            name: ubuntu-arm64

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@main
        with:
          python-version: "3.12"

      # --- Windows x64 Native Build Steps ---
      - name: Install UPX (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $url = "https://github.com/upx/upx/releases/download/v5.0.0/upx-5.0.0-win64.zip"
          $output = "upx.zip"
          Invoke-WebRequest -Uri $url -OutFile $output
          Expand-Archive -Path $output -DestinationPath C:\upx_temp
          New-Item -ItemType Directory -Path C:\upx -Force
          Move-Item C:\upx_temp\upx-5.0.0-win64\* C:\upx -Force
          Remove-Item C:\upx_temp, $output -Recurse -Force

      # --- Native Build (Windows x64 & Ubuntu x64) ---
      - name: Install requirements and build (Native)
        if: matrix.arch != 'arm64'
        shell: bash
        run: |
          pip install pyinstaller
          pip install -r requirements.txt
          python .github/scripts/add_build_info.py
          
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            pyinstaller build.spec --upx-dir C:\\upx
          else
            pyinstaller build.spec
          fi

      # --- ARM64 Cross-Compile Build Steps ---
      - name: Set up QEMU for ARM64 build
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3

      - name: Install requirements and build (ARM64 via Docker)
        if: matrix.arch == 'arm64'
        shell: bash
        run: |
          # 使用一个 arm64 架构的 python docker 镜像来执行编译
          # --rm: 容器运行结束后自动删除
          # -v: 将当前工作目录挂载到容器的 /src 目录
          docker run --rm -v ${{ github.workspace }}:/src \
            arm64v8/python:3.12-slim-bookworm \
            /bin/bash -c "cd /src && \
                          pip install pyinstaller && \
                          pip install -r requirements.txt && \
                          python .github/scripts/add_build_info.py && \
                          pyinstaller build.spec"
      
      # --- Artifact Upload ---
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          # 使用矩阵中的 name 字段来命名产物，更清晰
          name: ${{ matrix.name }}-dist
          path: dist
          retention-days: 3

  Publish:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT }}
          repository: jiajiaxd/Steamauto-Tutorial
          event-type: Sync
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          # 不指定 name，会下载所有产物到指定目录
          path: ./Steamauto

      - name: Finalization
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          echo "DATE=$(date +"%Y%m%d-%H%M")" >> $GITHUB_ENV
          mkdir releases
          # 使用通配符将所有下载的产物文件夹中的内容移动到 releases 目录
          mv Steamauto/*-dist/* releases/

      - name: Upload to Github Releases
        uses: ncipollo/release-action@v1
        with:
          commit: "master"
          tag: ${{ env.DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: releases/*
          prerelease: true

